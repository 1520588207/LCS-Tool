function bickleyJet = bickley_jet(perturbationCase)
% Describes a bickley jet.
%
% References: doi:10.1016/j.physd.2012.06.012, doi:10.1063/1.3271342

p.u = 62.66;
p.c2 = .205*p.u;
p.c3 = .461*p.u;
a = 6371e3;
p.lengthX = pi*a;
p.lengthY = 1770e3;
k = @(n) 2*n*pi/p.lengthX;

p.epsilon1 = .075;
p.epsilon2 = .4;
% p.epsilon3 = .3;
p.epsilon3 = 0;

sigma1 = .5*k(2)*(p.c2 - p.c3);
sigma2 = 2*sigma1;

switch perturbationCase
    case {1,3}
        p.epsilon1 = p.epsilon1/10;
        p.epsilon2 = p.epsilon2/10;
end

switch perturbationCase
    case 1
        % Time-periodic psi1, case 1 on page 1691 of
        % doi:10.1016/j.physd.2012.06.012.
 
        % t = sym('t');
        % x = sym('x');
        % y = sym('y');

        f1 = @(t)exp(1i*sigma1*t);
        f2 = @(t)exp(1i*sigma2*t);

        % psi(1) = p.c3*y - p.u*p.lengthY*tanh(y/p.lengthY) ...
        %     + p.epsilon3*p.u*p.lengthY*(sech(y/p.lengthY))^2*cos(k(3)*x);

        % psi(2) = p.u*p.lengthY*(sech(y/p.lengthY))^2 ...
        %     *real(p.epsilon1*f1(t)*exp(1i*k(1)*x) ...
        %     + p.epsilon2*f2(t)*exp(1i*k(2)*x));

        % bickleyJet.flow.symDerivative(1) = -diff(psi(1) + psi(2),y);
        % bickleyJet.flow.symDerivative(2) = diff(psi(1) + psi(2),x);

        u = @(t,x)-p.c3 - p.u*(tanh(x(2)/p.lengthY)^2 - 1) ...
            + 2*p.u*sech(x(2)/p.lengthY)^2 ...
            *tanh(x(2)/p.lengthY) ...
            *(real(p.epsilon1*f1(t)*exp(k(1)*x(1)*1i) ...
            + p.epsilon2*f2(t)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*cos(k(3)*x(1)));
        % FIXME Terms set to 0 to match Figure 16
        u = @(t,x)-0*p.c3 - 0*p.u*(tanh(x(2)/p.lengthY)^2 - 1) ...
            + 2*p.u*sech(x(2)/p.lengthY)^2 ...
            *tanh(x(2)/p.lengthY) ...
            *(real(p.epsilon1*f1(t)*exp(k(1)*x(1)*1i) ...
            + p.epsilon2*f2(t)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*cos(k(3)*x(1)));
        v = @(t,x)-p.u*p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i) ...
            + p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        
        bickleyJet.flow.derivative = @(t,x)[u(t,x); v(t,x)];

        dux = @(t,x)-2*p.u ...
            *sech(x(2)/p.lengthY)^2*tanh(x(2)/p.lengthY) ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i)) ...
            + imag(p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        duy = @(t,x)-2*p.u/p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *((3*tanh(x(2)/p.lengthY)^2 - 1) ...
            *(real(p.epsilon1*f1(t)*exp(k(1)*x(1)*1i)) ...
            + real(p.epsilon2*f2(t)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*cos(k(3)*x(1))) + tanh(x(2)/p.lengthY));
        dvx = @(t,x)-p.u*p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *(real(p.epsilon1*f1(t)*k(1)^2*exp(k(1)*x(1)*1i)) ...
            + real(p.epsilon2*f2(t)*k(2)^2*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)^2*cos(k(3)*x(1)));
        dvy = @(t,x)2*p.u*sech(x(2)/p.lengthY)^2*tanh(x(2)/p.lengthY) ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i)) ...
            + imag(p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        
        bickleyJet.flow.dDerivative = @(t,x)[dux(t,x) duy(t,x); ...
            dvx(t,x) dvy(t,x)];
    
    case {2,3}
        % Time-aperiodic psi1, case 2 on page 1691 of
        % doi:10.1016/j.physd.2012.06.012

        % Duffing oscillator
        % FIXME Value copied from Javier's lcsgeo_bickleyduffing_u1
        beronVeraNT = 5;
        beronVeraW = 5;
        phiTimespan = [0 beronVeraNT*beronVeraW];

        phiInitial = [0 0];
        phiSol = ode45(@d_phi,phiTimespan,phiInitial);
        
        timeResolution = 1e3;
        phi2 = deval(phiSol,linspace(phiTimespan(1),phiTimespan(2),...
            timeResolution),2);
        
        % Computational optimization -- solve forcing function once for
        % entire timespan and use interpolation when integrating forced
        % flow.
        phi2Int = griddedInterpolant(linspace(phiTimespan(1),...
            phiTimespan(2),timeResolution),phi2);
        
        sigma1 = .5*k(2)*(p.c2 - p.c3);
        sigma2 = 2*sigma1;
        
        beronVeraT = max(2*pi./abs([sigma1 sigma2]));
        
        % Find maximum value of phi
        % FIXME Sufficently large maxSamples found heuristically.
        % maxSamples = 1e3;
        phi2Max = max(phi2);
        
        beronVeraMagicScaleAmp = 1.75;
        beronVeraMagicScaleTime = beronVeraT/beronVeraW;
        f1 = @(t)beronVeraMagicScaleAmp*phi2Int(t ...
            /beronVeraMagicScaleTime)*phi2Max;
        f2 = @(t)f1(t);
        
        u = @(t,x)-p.c3 - p.u*(tanh(x(2)/p.lengthY)^2 - 1) ...
            + 2*p.u*sech(x(2)/p.lengthY)^2 ...
            *tanh(x(2)/p.lengthY) ...
            *(real(p.epsilon1*f1(t)*exp(k(1)*x(1)*1i)) ...
            + real(p.epsilon2*f2(t)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*cos(k(3)*x(1)));
        v = @(t,x)-p.u*p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i)) ...
            + imag(p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        
        bickleyJet.flow.derivative = @(t,x)[u(t,x); v(t,x)];

        dux = @(t,x)-2*p.u ...
            *sech(x(2)/p.lengthY)^2*tanh(x(2)/p.lengthY) ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i)) ...
            + imag(p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        duy = @(t,x)-2*p.u/p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *((3*tanh(x(2)/p.lengthY)^2 - 1) ...
            *(real(p.epsilon1*f1(t)*exp(k(1)*x(1)*1i)) ...
            + real(p.epsilon2*f2(t)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*cos(k(3)*x(1))) + tanh(x(2)/p.lengthY));
        dvx = @(t,x)-p.u*p.lengthY*sech(x(2)/p.lengthY)^2 ...
            *(real(p.epsilon1*f1(t)*k(1)^2*exp(k(1)*x(1)*1i)) ...
            + real(p.epsilon2*f2(t)*k(2)^2*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)^2*cos(k(3)*x(1)));
        dvy = @(t,x)2*p.u*sech(x(2)/p.lengthY)^2*tanh(x(2)/p.lengthY) ...
            *(imag(p.epsilon1*f1(t)*k(1)*exp(k(1)*x(1)*1i)) ...
            + imag(p.epsilon2*f2(t)*k(2)*exp(k(2)*x(1)*1i)) ...
            + p.epsilon3*k(3)*sin(k(3)*x(1)));
        
        bickleyJet.flow.dDerivative = @(t,x)[dux(t,x) duy(t,x); ...
            dvx(t,x) dvy(t,x)];

    otherwise
        error('Invalid perturbation case selected')
end

bickleyJet.flow.isCompressible = false;
bickleyJet.flow.periodicBc = [true false];

% FIXME In doi:10.1016/j.physd.2012.06.012, x_max = 2*pi*p.lengthX.
bickleyJet.flow = set_flow_domain([0 .3*pi*p.lengthX; ...
    [-1 1]*2.25*p.lengthY],bickleyJet.flow);
bickleyJet.flow = set_flow_timespan([0 4*p.lengthX/p.u],bickleyJet.flow);

bickleyJet.flow = set_flow_resolution(20,bickleyJet.flow);

bickleyJet.flow.isCompressible = false;

bickleyJet.strainline = set_strainline_resolution(uint64([4 3]));
bickleyJet.strainline = set_strainline_max_length(1e6,bickleyJet.strainline);
bickleyJet.strainline = set_strainline_geodesic_deviation_tol(inf,...
    bickleyJet.strainline);
bickleyJet.strainline = set_strainline_length_tol(0,bickleyJet.strainline);
bickleyJet.strainline.filteringMethod = 'superminimization';
bickleyJet.strainline.filteringParameters = struct('distance',0,...
    'resolution',uint64([1 1]));

bickleyJet.shearline = set_shearline_resolution(uint64([2 1]*5));
bickleyJet.shearline = set_shearline_max_length(.1,bickleyJet.shearline);
bickleyJet.shearline = set_shearline_average_geodesic_deviation_tol(...
    [inf inf],bickleyJet.shearline);

% Forced-damped Duffing oscillator used with aperiodic forcing
function dPhi = d_phi(tau,phi)
dPhi(2,1) = nan;

dPhi(1) = phi(2);
dPhi(2) = -.1*phi(2) - phi(1)^3 + 11*cos(tau);
